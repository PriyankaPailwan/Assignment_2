use mavenmovies;
-- Question 1: Retrieve the total number of rentals made in the Sakila database.
select count(*) from rental;

-- Question 2: Find the average rental duration (in days) of movies rented from the Sakila database.
SELECT AVG(DATEDIFF(rental.return_date, rental.rental_date)) AS avg_rental_duration FROM rental;
-- Question 3: Display the first name and last name of customers in uppercase. 
select upper(first_name) ,upper(last_name)  from customer;

-- Question 4: Extract the month from the rental date and display it alongside the rental ID.
select rental_id , month(rental_date) as MONTH from rental;

-- Question 5: Retrieve the count of rentals for each customer (display customer ID and the count of rentals). 
select customer_id , count(rental_id) from rental group by customer_id;

-- Question 6: Find the total revenue generated by each store. 
select st.store_id , SUM(p.amount) as total_revenue from payment p
inner join  staff sf on sf.staff_id = p.staff_id
inner join store st on st.store_id = st.store_id group by st.store_id;

-- Question 7: Display the title of the movie, customer s first name, and last name who rented it. 
SELECT title AS movie_title,customer.first_name,customer.last_name
FROM rental
JOIN customer ON rental.customer_id = customer.customer_id
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id;
    
-- Question 8: Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
select first_name , last_name from actor 
join 
film_actor on actor.actor_id = film_actor.actor_id
join 
film on film_actor.film_id = film.film_id
where 
film.title = " Gone with the Wind ";
   
-- GROUP BY: Question 1: Determine the total number of rentals for each category of movies. 
select category_id ,count(rental_id) as total_rentals from film_category
join film on film_category.film_id = film.film_id
join inventory on film.film_id = inventory.film_id
join rental on inventory.inventory_id = rental.inventory_id
group by category_id;

-- Question 2: Find the average rental rate of movies in each language. 
select name ,avg(film.rental_rate) from language
join film on language.language_id = film.language_id
group by name;

-- Joins:Question 3: Retrieve the customer names along with the total amount they've spent on rentals. 
select concat(first_name ," " , last_name) as customer_name , sum(amount) from customer
join payment on customer.customer_id = payment.customer_id
group by customer_name;

-- Question 4: List the titles of movies rented by each customer in a particular city (e.g., 'London').
select title , concat(first_name , " " , last_name) as customer_name from customer
join rental on customer.customer_id = rental.customer_id
join inventory on rental.inventory_id = inventory.inventory_id
join film on inventory.film_id = film.film_id
join address on customer.address_id = address.address_id
join city on address.city_id = city.city_id
where city.city = "London"
order by customer_name;

-- Question 5: Display the top 5 rented movies along with the number of times they've been rented. 
select title ,count(rental_id) as rental_count from film
join inventory on film.film_id = inventory.film_id
join rental on inventory.inventory_id = rental.inventory_id
group by title
order by rental_count
limit 5;

-- Question 6: Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
select c.customer_id, concat(c.first_name,' ', c.last_name) as name, st.store_id
from customer c 
inner join rental r  on r.customer_id = c.customer_id 
inner join inventory iv on iv.inventory_id = r.customer_id
inner join store st on st.store_id = iv.store_id
where st.store_id in (1,2)
group by c.customer_id, st.store_id, name 
having count(distinct st.store_id);